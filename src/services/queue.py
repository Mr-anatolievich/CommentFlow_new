from celery import Celery
import os
from typing import Optional

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Celery
REDIS_URL = os.getenv("REDIS_URL", "redis://localhost:6379/0")

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∑–µ–º–ø–ª—è—Ä–∞ Celery
celery_app = Celery(
    "automation_tasks",
    broker=REDIS_URL,
    backend=REDIS_URL,
    include=["src.tasks.automation"]
)

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è Celery
celery_app.conf.update(
    task_serializer="json",
    accept_content=["json"],
    result_serializer="json",
    timezone="UTC",
    enable_utc=True,
    task_track_started=True,
    task_time_limit=30 * 60,  # 30 —Ö–≤–∏–ª–∏–Ω
    task_soft_time_limit=25 * 60,  # 25 —Ö–≤–∏–ª–∏–Ω
    worker_prefetch_multiplier=1,
    worker_max_tasks_per_child=1000,
    task_always_eager=False,  # –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ True –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –±–µ–∑ Redis
)

# –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü—ñ—è –∑–∞–≤–¥–∞–Ω—å
celery_app.conf.task_routes = {
    "src.tasks.automation.process_facebook_comments": {"queue": "facebook_automation"},
    "src.tasks.automation.setup_facebook_session": {"queue": "facebook_setup"},
    "src.tasks.automation.cleanup_facebook_session": {"queue": "facebook_cleanup"},
}

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —á–µ—Ä–≥
celery_app.conf.task_default_queue = "default"
celery_app.conf.task_create_missing_queues = True

async def queue_automation_task(task_id: str, priority: int = 5) -> str:
    """–î–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó –¥–æ —á–µ—Ä–≥–∏"""
    try:
        result = celery_app.send_task(
            "src.tasks.automation.process_facebook_comments",
            args=[task_id],
            queue="facebook_automation",
            priority=priority,
            retry=True,
            retry_policy={
                'max_retries': 3,
                'interval_start': 0,
                'interval_step': 60,
                'interval_max': 600,
            }
        )
        
        print(f"‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è {task_id} –¥–æ–¥–∞–Ω–æ –¥–æ —á–µ—Ä–≥–∏: {result.id}")
        return result.id
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è –¥–æ —á–µ—Ä–≥–∏: {e}")
        raise

def get_task_status(celery_task_id: str) -> dict:
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∑–∞–≤–¥–∞–Ω–Ω—è Celery"""
    try:
        result = celery_app.AsyncResult(celery_task_id)
        return {
            "task_id": celery_task_id,
            "status": result.status,
            "result": result.result,
            "traceback": result.traceback
        }
    except Exception as e:
        return {
            "task_id": celery_task_id,
            "status": "ERROR",
            "result": str(e),
            "traceback": None
        }

def cancel_task(celery_task_id: str) -> bool:
    """–°–∫–∞—Å—É–≤–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è Celery"""
    try:
        celery_app.control.revoke(celery_task_id, terminate=True)
        print(f"üö´ –ó–∞–≤–¥–∞–Ω–Ω—è {celery_task_id} —Å–∫–∞—Å–æ–≤–∞–Ω–æ")
        return True
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è: {e}")
        return False

# –ü–µ—Ä—ñ–æ–¥–∏—á–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è (Celery Beat)
celery_app.conf.beat_schedule = {
    # –û—á–∏—â–µ–Ω–Ω—è –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏—Ö –∑–∞–≤–¥–∞–Ω—å –∫–æ–∂–Ω—ñ 6 –≥–æ–¥–∏–Ω
    'cleanup-old-tasks': {
        'task': 'src.tasks.maintenance.cleanup_old_tasks',
        'schedule': 6 * 60 * 60,  # 6 –≥–æ–¥–∏–Ω
    },
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É Facebook –∞–∫–∞—É–Ω—Ç—ñ–≤ —â–æ–¥–Ω—è
    'check-facebook-accounts': {
        'task': 'src.tasks.maintenance.check_facebook_accounts_health',
        'schedule': 24 * 60 * 60,  # 24 –≥–æ–¥–∏–Ω–∏
    },
}

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è —Ä–æ–∑—Ä–æ–±–∫–∏
if os.getenv("DEVELOPMENT") == "true":
    celery_app.conf.task_always_eager = True
    celery_app.conf.task_eager_propagates = True