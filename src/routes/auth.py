from fastapi import APIRouter, Depends, HTTPException, status
from pydantic import BaseModel
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from datetime import datetime

from src.services.auth import verify_telegram_auth, create_access_token, get_current_user
from src.services.database import get_db_session
from src.models.database import User

router = APIRouter()

class TelegramAuthRequest(BaseModel):
    initData: str

class AuthResponse(BaseModel):
    access_token: str
    token_type: str
    user: dict

class UserInfo(BaseModel):
    id: int
    telegram_id: str
    username: str | None
    first_name: str | None
    is_approved: bool
    is_admin: bool

@router.post("/login", response_model=AuthResponse)
async def login(
    auth_request: TelegramAuthRequest,
    db: AsyncSession = Depends(get_db_session)
):
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —á–µ—Ä–µ–∑ Telegram Mini App"""
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∞–Ω–∏—Ö Telegram
    telegram_user = verify_telegram_auth(auth_request.initData)
    
    telegram_id = str(telegram_user.get("id"))
    username = telegram_user.get("username")
    first_name = telegram_user.get("first_name")
    last_name = telegram_user.get("last_name")
    
    # –ü–æ—à—É–∫ —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    result = await db.execute(
        select(User).where(User.telegram_id == telegram_id)
    )
    user = result.scalar_one_or_none()
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î
    if not user:
        user = User(
            telegram_id=telegram_id,
            username=username,
            first_name=first_name,
            last_name=last_name,
            is_approved=False,  # –ü–æ—Ç—Ä—ñ–±–Ω–µ —Å—Ö–≤–∞–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            is_admin=False
        )
        db.add(user)
        await db.commit()
        await db.refresh(user)
        
        print(f"üìù –ù–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π: {username} (ID: {telegram_id})")
    else:
        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user.username = username
        user.first_name = first_name
        user.last_name = last_name
        user.last_activity = datetime.utcnow()
        await db.commit()
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è JWT —Ç–æ–∫–µ–Ω–∞
    access_token = create_access_token(
        data={"telegram_id": user.telegram_id}
    )
    
    return AuthResponse(
        access_token=access_token,
        token_type="bearer",
        user={
            "id": user.id,
            "telegram_id": user.telegram_id,
            "username": user.username,
            "first_name": user.first_name,
            "is_approved": user.is_approved,
            "is_admin": user.is_admin
        }
    )

@router.get("/me", response_model=UserInfo)
async def get_current_user_info(
    current_user: User = Depends(get_current_user)
):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    return UserInfo(
        id=current_user.id,
        telegram_id=current_user.telegram_id,
        username=current_user.username,
        first_name=current_user.first_name,
        is_approved=current_user.is_approved,
        is_admin=current_user.is_admin
    )

@router.post("/check-approval")
async def check_user_approval(
    current_user: User = Depends(get_current_user)
):
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É —Å—Ö–≤–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    return {
        "is_approved": current_user.is_approved,
        "is_admin": current_user.is_admin,
        "message": "–°—Ö–≤–∞–ª–µ–Ω–æ" if current_user.is_approved else "–û—á—ñ–∫—É—î —Å—Ö–≤–∞–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
    }