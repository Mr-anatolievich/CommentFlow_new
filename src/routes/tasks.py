from fastapi import APIRouter, Depends, HTTPException, status
from pydantic import BaseModel, Field
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, and_
from typing import List
from datetime import datetime

from src.services.auth import get_current_approved_user, get_current_user
from src.services.database import get_db_session
from src.models.database import User, AutomationTask, FacebookAccount
from src.services.queue import queue_automation_task

router = APIRouter()

class TaskCreateRequest(BaseModel):
    geo_location: str = Field(..., min_length=2, max_length=5, description="–ö–æ–¥ –∫—Ä–∞—ó–Ω–∏ (BR, US, UK —Ç–æ—â–æ)")
    comments: List[str] = Field(..., min_items=8, max_items=8, description="–†—ñ–≤–Ω–æ 8 –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤")
    post_links: List[str] = Field(..., min_items=1, max_items=10, description="–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ Facebook –ø–æ—Å—Ç–∏")

class TaskResponse(BaseModel):
    id: str
    geo_location: str
    comments: List[str]
    post_links: List[str]
    status: str
    comments_posted: int
    created_at: str
    started_at: str | None
    completed_at: str | None
    admin_notes: str | None
    error_message: str | None

class TaskStatusUpdate(BaseModel):
    status: str
    admin_notes: str | None = None

# –ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ –≥–µ–æ –ª–æ–∫–∞—Ü—ñ—ó
SUPPORTED_GEOS = ["BR", "US", "UK", "DE", "FR", "ES", "IT", "CA", "AU", "MX"]

@router.post("/", response_model=dict)
async def create_task(
    task_data: TaskCreateRequest,
    current_user: User = Depends(get_current_approved_user),
    db: AsyncSession = Depends(get_db_session)
):
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó"""
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏—Ö –≥–µ–æ
    if task_data.geo_location not in SUPPORTED_GEOS:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail=f"–ù–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∞ –≥–µ–æ –ª–æ–∫–∞—Ü—ñ—è. –î–æ—Å—Ç—É–ø–Ω—ñ: {', '.join(SUPPORTED_GEOS)}"
        )
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤
    if len(task_data.comments) != 8:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="–ü–æ—Ç—Ä—ñ–±–Ω–æ —Ä—ñ–≤–Ω–æ 8 –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤"
        )
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∞–∫–∞—É–Ω—Ç—ñ–≤ –¥–ª—è –≥–µ–æ
    result = await db.execute(
        select(FacebookAccount).where(
            and_(
                FacebookAccount.geo_location == task_data.geo_location,
                FacebookAccount.is_active == True,
                FacebookAccount.is_blocked == False
            )
        )
    )
    available_accounts = result.scalars().all()
    
    if not available_accounts:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail=f"–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö Facebook –∞–∫–∞—É–Ω—Ç—ñ–≤ –¥–ª—è –≥–µ–æ {task_data.geo_location}"
        )
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è
    new_task = AutomationTask(
        user_id=current_user.id,
        geo_location=task_data.geo_location,
        comments=task_data.comments,
        post_links=task_data.post_links,
        status="pending_approval"
    )
    
    db.add(new_task)
    await db.commit()
    await db.refresh(new_task)
    
    print(f"üìã –ù–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ: {new_task.id} –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {current_user.username}")
    
    return {
        "task_id": str(new_task.id),
        "status": "submitted_for_approval",
        "message": "–ó–∞–≤–¥–∞–Ω–Ω—è –ø–æ–¥–∞–Ω–æ –Ω–∞ —Ä–æ–∑–≥–ª—è–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
    }

@router.get("/", response_model=List[TaskResponse])
async def get_user_tasks(
    current_user: User = Depends(get_current_user),
    db: AsyncSession = Depends(get_db_session)
):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    
    result = await db.execute(
        select(AutomationTask)
        .where(AutomationTask.user_id == current_user.id)
        .order_by(AutomationTask.created_at.desc())
    )
    tasks = result.scalars().all()
    
    return [
        TaskResponse(
            id=str(task.id),
            geo_location=task.geo_location,
            comments=task.comments,
            post_links=task.post_links,
            status=task.status,
            comments_posted=task.comments_posted,
            created_at=task.created_at.isoformat(),
            started_at=task.started_at.isoformat() if task.started_at else None,
            completed_at=task.completed_at.isoformat() if task.completed_at else None,
            admin_notes=task.admin_notes,
            error_message=task.error_message
        )
        for task in tasks
    ]

@router.get("/{task_id}", response_model=TaskResponse)
async def get_task(
    task_id: str,
    current_user: User = Depends(get_current_user),
    db: AsyncSession = Depends(get_db_session)
):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è"""
    
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ task_id —è–∫ —Ä—è–¥–æ–∫, –æ—Å–∫—ñ–ª—å–∫–∏ —Ç–µ–ø–µ—Ä UUID –∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è —è–∫ String(36)
    if not task_id:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ID –∑–∞–≤–¥–∞–Ω–Ω—è"
        )
    
    result = await db.execute(
        select(AutomationTask).where(
            and_(
                AutomationTask.id == task_id,
                AutomationTask.user_id == current_user.id
            )
        )
    )
    task = result.scalar_one_or_none()
    
    if not task:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–ó–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
        )
    
    return TaskResponse(
        id=str(task.id),
        geo_location=task.geo_location,
        comments=task.comments,
        post_links=task.post_links,
        status=task.status,
        comments_posted=task.comments_posted,
        created_at=task.created_at.isoformat(),
        started_at=task.started_at.isoformat() if task.started_at else None,
        completed_at=task.completed_at.isoformat() if task.completed_at else None,
        admin_notes=task.admin_notes,
        error_message=task.error_message
    )

@router.delete("/{task_id}")
async def cancel_task(
    task_id: str,
    current_user: User = Depends(get_current_user),
    db: AsyncSession = Depends(get_db_session)
):
    """–°–∫–∞—Å—É–≤–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è (—Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –≤–æ–Ω–æ —â–µ –Ω–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è)"""
    
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ task_id —è–∫ —Ä—è–¥–æ–∫, –æ—Å–∫—ñ–ª—å–∫–∏ —Ç–µ–ø–µ—Ä UUID –∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è —è–∫ String(36)
    if not task_id:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ID –∑–∞–≤–¥–∞–Ω–Ω—è"
        )
    
    result = await db.execute(
        select(AutomationTask).where(
            and_(
                AutomationTask.id == task_id,
                AutomationTask.user_id == current_user.id
            )
        )
    )
    task = result.scalar_one_or_none()
    
    if not task:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–ó–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
        )
    
    if task.status not in ["pending_approval", "approved"]:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="–ù–µ–º–æ–∂–ª–∏–≤–æ —Å–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è, —â–æ –≤–∂–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –∞–±–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
        )
    
    await db.delete(task)
    await db.commit()
    
    return {"message": "–ó–∞–≤–¥–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ"}

@router.get("/supported/geos")
async def get_supported_geos():
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏—Ö –≥–µ–æ –ª–æ–∫–∞—Ü—ñ–π"""
    return {
        "supported_geos": SUPPORTED_GEOS,
        "descriptions": {
            "BR": "–ë—Ä–∞–∑–∏–ª—ñ—è",
            "US": "–°–®–ê", 
            "UK": "–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω—ñ—è",
            "DE": "–ù—ñ–º–µ—á—á–∏–Ω–∞",
            "FR": "–§—Ä–∞–Ω—Ü—ñ—è",
            "ES": "–Ü—Å–ø–∞–Ω—ñ—è",
            "IT": "–Ü—Ç–∞–ª—ñ—è",
            "CA": "–ö–∞–Ω–∞–¥–∞",
            "AU": "–ê–≤—Å—Ç—Ä–∞–ª—ñ—è",
            "MX": "–ú–µ–∫—Å–∏–∫–∞"
        }
    }