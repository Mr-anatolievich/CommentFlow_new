from celery import current_task
from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine, async_sessionmaker
from sqlalchemy import select, update
import asyncio
import logging
import json
import os
import random
from datetime import datetime
from typing import Dict, List, Optional
import sys

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ backend –¥–ª—è —ñ–º–ø–æ—Ä—Ç—É
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..', 'backend'))

from src.models.database import AutomationTask, FacebookAccount, TaskExecutionLog
from src.services.encryption import credential_manager
from src.services.queue import celery_app
from automation.src.browser_manager import BrowserManager
from automation.src.facebook_automation import FacebookCommentBot

logger = logging.getLogger(__name__)

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –¥–ª—è –∑–∞–≤–¥–∞–Ω—å
DATABASE_URL = os.getenv("DATABASE_URL", "postgresql+asyncpg://automation_user:defaultpassword@localhost/automation_db")
engine = create_async_engine(DATABASE_URL)
AsyncSessionLocal = async_sessionmaker(engine, class_=AsyncSession, expire_on_commit=False)

async def get_db_session():
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–µ—Å—ñ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
    async with AsyncSessionLocal() as session:
        try:
            yield session
        except Exception:
            await session.rollback()
            raise
        finally:
            await session.close()

@celery_app.task(bind=True, max_retries=3)
def process_facebook_comments(self, task_id: str):
    """–û—Å–Ω–æ–≤–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è Celery –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ Facebook"""
    
    logger.info(f"üöÄ –ü–æ—á–∞—Ç–æ–∫ –æ–±—Ä–æ–±–∫–∏ –∑–∞–≤–¥–∞–Ω–Ω—è {task_id}")
    
    try:
        # –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        result = loop.run_until_complete(_process_comments_async(self, task_id))
        loop.close()
        
        return result
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –∑–∞–≤–¥–∞–Ω–Ω—è {task_id}: {e}")
        
        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∑–∞–≤–¥–∞–Ω–Ω—è –≤ –ë–î
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(_update_task_status(task_id, "failed", str(e)))
        loop.close()
        
        # –ü–æ–≤—Ç–æ—Ä–Ω–∞ —Å–ø—Ä–æ–±–∞ —è–∫—â–æ –Ω–µ –≤–∏—á–µ—Ä–ø–∞–Ω–æ –ª—ñ–º—ñ—Ç
        if self.request.retries < self.max_retries:
            logger.info(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞ —Å–ø—Ä–æ–±–∞ {self.request.retries + 1}/{self.max_retries}")
            raise self.retry(countdown=60 * (self.request.retries + 1))  # –ï–∫—Å–ø–æ–Ω–µ–Ω—Ü—ñ–π–Ω–∞ –∑–∞—Ç—Ä–∏–º–∫–∞
        
        raise

async def _process_comments_async(celery_task, task_id: str) -> Dict:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤"""
    
    browser_manager = None
    task = None
    facebook_account = None
    
    try:
        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è –∑ –ë–î
        async for db in get_db_session():
            result = await db.execute(
                select(AutomationTask).where(AutomationTask.id == task_id)
            )
            task = result.scalar_one_or_none()
            break
        
        if not task:
            raise Exception(f"–ó–∞–≤–¥–∞–Ω–Ω—è {task_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î")
        
        if task.status != "approved":
            raise Exception(f"–ó–∞–≤–¥–∞–Ω–Ω—è {task_id} –Ω–µ —Å—Ö–≤–∞–ª–µ–Ω–æ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è")
        
        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –Ω–∞ "processing"
        await _update_task_status(task_id, "processing")
        
        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è Facebook –∞–∫–∫–∞—É–Ω—Ç–∞
        async for db in get_db_session():
            result = await db.execute(
                select(FacebookAccount).where(
                    FacebookAccount.geo_location == task.geo_location and
                    FacebookAccount.is_active == True and
                    FacebookAccount.is_blocked == False
                )
            )
            facebook_account = result.scalars().first()
            break
        
        if not facebook_account:
            raise Exception(f"–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö Facebook –∞–∫–∫–∞—É–Ω—Ç—ñ–≤ –¥–ª—è {task.geo_location}")
        
        # –†–æ–∑—à–∏—Ñ—Ä–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–∞
        cookies = credential_manager.decrypt_facebook_cookies(facebook_account.encrypted_cookies)
        
        proxy_info = None
        if facebook_account.proxy_info:
            proxy_info = credential_manager.decrypt_proxy_info(facebook_account.proxy_info)
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±—Ä–∞—É–∑–µ—Ä–∞
        browser_manager = BrowserManager()
        browser = await browser_manager.init_browser(headless=True)
        context = await browser_manager.create_context(
            cookies=cookies,
            proxy=proxy_info,
            geo_location=task.geo_location
        )
        page = await context.new_page()
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ –¥–ª—è –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤
        comment_bot = FacebookCommentBot(page)
        
        # –õ–æ–≥ –ø–æ—á–∞—Ç–∫—É –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
        await _log_task_execution(task_id, "start", "success", f"–†–æ–∑–ø–æ—á–∞—Ç–æ –æ–±—Ä–æ–±–∫—É –∑ –∞–∫–∫–∞—É–Ω—Ç–æ–º {facebook_account.account_name}")
        
        comments_posted = 0
        total_comments = len(task.comments) * len(task.post_links)
        
        # –û–±—Ä–æ–±–∫–∞ –∫–æ–∂–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
        for post_index, post_url in enumerate(task.post_links):
            logger.info(f"üìù –û–±—Ä–æ–±–∫–∞ –ø–æ—Å—Ç–∞ {post_index + 1}/{len(task.post_links)}: {post_url}")
            
            # –ù–∞–≤—ñ–≥–∞—Ü—ñ—è –¥–æ –ø–æ—Å—Ç–∞
            if not await comment_bot.navigate_to_post(post_url):
                await _log_task_execution(
                    task_id, "navigation", "error", 
                    f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø–æ—Å—Ç: {post_url}"
                )
                continue
            
            await _log_task_execution(
                task_id, "navigation", "success", 
                f"–£—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –ø–æ—Å—Ç: {post_url}"
            )
            
            # –ü—É–±–ª—ñ–∫–∞—Ü—ñ—è –∫–æ–∂–Ω–æ–≥–æ –∫–æ–º–µ–Ω—Ç–∞—Ä—è
            for comment_index, comment in enumerate(task.comments):
                logger.info(f"üí¨ –ü—É–±–ª—ñ–∫–∞—Ü—ñ—è –∫–æ–º–µ–Ω—Ç–∞—Ä—è {comment_index + 1}/{len(task.comments)}")
                
                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–ª–æ–∫—É–≤–∞–Ω—å
                if not await comment_bot.handle_potential_blocks():
                    await _log_task_execution(
                        task_id, "block_check", "error",
                        "–í–∏—è–≤–ª–µ–Ω–æ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∞–∫–∫–∞—É–Ω—Ç–∞"
                    )
                    
                    # –ü–æ–∑–Ω–∞—á–∞—î–º–æ –∞–∫–∫–∞—É–Ω—Ç —è–∫ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π
                    async for db in get_db_session():
                        await db.execute(
                            update(FacebookAccount)
                            .where(FacebookAccount.id == facebook_account.id)
                            .values(is_blocked=True)
                        )
                        await db.commit()
                        break
                    break
                
                # –ü—É–±–ª—ñ–∫–∞—Ü—ñ—è –∫–æ–º–µ–Ω—Ç–∞—Ä—è
                success = await comment_bot.post_comment(comment)
                
                if success:
                    comments_posted += 1
                    await _log_task_execution(
                        task_id, "comment", "success",
                        f"–ö–æ–º–µ–Ω—Ç–∞—Ä –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ: {comment[:50]}..."
                    )
                    logger.info(f"‚úÖ –ö–æ–º–µ–Ω—Ç–∞—Ä {comment_index + 1} –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ")
                else:
                    await _log_task_execution(
                        task_id, "comment", "error",
                        f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏: {comment[:50]}..."
                    )
                    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –∫–æ–º–µ–Ω—Ç–∞—Ä—è {comment_index + 1}")
                
                # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É
                progress = (comments_posted / total_comments) * 100
                celery_task.update_state(
                    state='PROGRESS',
                    meta={
                        'current': comments_posted,
                        'total': total_comments,
                        'progress': progress,
                        'status': f'–û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ {comments_posted}/{total_comments} –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤'
                    }
                )
                
                # –í–∏–ø–∞–¥–∫–æ–≤–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –∫–æ–º–µ–Ω—Ç–∞—Ä—è–º–∏ (30-120 —Å–µ–∫—É–Ω–¥)
                delay = random.randint(30, 120)
                logger.info(f"‚è∞ –ó–∞—Ç—Ä–∏–º–∫–∞ {delay} —Å–µ–∫—É–Ω–¥ –º—ñ–∂ –∫–æ–º–µ–Ω—Ç–∞—Ä—è–º–∏")
                await asyncio.sleep(delay)
            
            # –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –ø–æ—Å—Ç–∞–º–∏ (5-10 —Ö–≤–∏–ª–∏–Ω)
            if post_index < len(task.post_links) - 1:  # –ù–µ –∑–∞—Ç—Ä–∏–º—É—î–º–æ—Å—è –ø—ñ—Å–ª—è –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –ø–æ—Å—Ç–∞
                delay = random.randint(300, 600)
                logger.info(f"‚è∞ –ó–∞—Ç—Ä–∏–º–∫–∞ {delay} —Å–µ–∫—É–Ω–¥ –º—ñ–∂ –ø–æ—Å—Ç–∞–º–∏")
                await asyncio.sleep(delay)
        
        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–∫–∫–∞—É–Ω—Ç–∞
        async for db in get_db_session():
            await db.execute(
                update(FacebookAccount)
                .where(FacebookAccount.id == facebook_account.id)
                .values(last_used=datetime.utcnow())
            )
            await db.commit()
            break
        
        # –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è
        await _update_task_status(
            task_id, "completed", 
            comments_posted=comments_posted,
            facebook_account_id=facebook_account.id
        )
        
        await _log_task_execution(
            task_id, "completion", "success",
            f"–ó–∞–≤–¥–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ {comments_posted}/{total_comments} –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤"
        )
        
        logger.info(f"üéâ –ó–∞–≤–¥–∞–Ω–Ω—è {task_id} —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        
        return {
            "status": "completed",
            "comments_posted": comments_posted,
            "total_comments": total_comments,
            "facebook_account": facebook_account.account_name
        }
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–∞–≤–¥–∞–Ω–Ω—è {task_id}: {e}")
        
        if task:
            await _update_task_status(task_id, "failed", str(e))
        
        await _log_task_execution(
            task_id, "error", "error", str(e)
        )
        
        raise
    
    finally:
        if browser_manager:
            await browser_manager.close()

async def _update_task_status(
    task_id: str, 
    status: str, 
    error_message: Optional[str] = None,
    comments_posted: Optional[int] = None,
    facebook_account_id: Optional[int] = None
):
    """–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∑–∞–≤–¥–∞–Ω–Ω—è –≤ –ë–î"""
    try:
        async for db in get_db_session():
            update_data = {"status": status}
            
            if status == "processing":
                update_data["started_at"] = datetime.utcnow()
            elif status in ["completed", "failed"]:
                update_data["completed_at"] = datetime.utcnow()
            
            if error_message:
                update_data["error_message"] = error_message
            
            if comments_posted is not None:
                update_data["comments_posted"] = comments_posted
            
            if facebook_account_id:
                update_data["facebook_account_id"] = facebook_account_id
            
            await db.execute(
                update(AutomationTask)
                .where(AutomationTask.id == task_id)
                .values(**update_data)
            )
            await db.commit()
            break
            
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∑–∞–≤–¥–∞–Ω–Ω—è: {e}")

async def _log_task_execution(
    task_id: str,
    step: str,
    status: str,
    message: str,
    details: Optional[Dict] = None
):
    """–õ–æ–≥—É–≤–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è"""
    try:
        async for db in get_db_session():
            log_entry = TaskExecutionLog(
                task_id=task_id,
                step=step,
                status=status,
                message=message,
                details=details or {},
                timestamp=datetime.utcnow()
            )
            db.add(log_entry)
            await db.commit()
            break
            
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è: {e}")