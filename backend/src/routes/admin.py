from fastapi import APIRouter, Depends, HTTPException, status
from pydantic import BaseModel
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, and_, or_, update, func
from typing import List, Optional
from datetime import datetime

from src.services.auth import get_current_admin_user
from src.services.database import get_db_session
from src.models.database import User, AutomationTask, FacebookAccount
from src.services.queue import queue_automation_task

router = APIRouter()

class PendingTaskResponse(BaseModel):
    id: str
    user_id: int
    username: str | None
    first_name: str | None
    geo_location: str
    comments: List[str]
    post_links: List[str]
    created_at: str

class UserApprovalRequest(BaseModel):
    user_id: int
    is_approved: bool
    is_admin: bool = False

class TaskApprovalRequest(BaseModel):
    task_id: str
    action: str  # "approve" –∞–±–æ "reject"
    admin_notes: Optional[str] = None

class UserListResponse(BaseModel):
    id: int
    telegram_id: str
    username: str | None
    first_name: str | None
    is_approved: bool
    is_admin: bool
    created_at: str
    last_activity: str
    tasks_count: int

@router.get("/pending-tasks", response_model=List[PendingTaskResponse])
async def get_pending_tasks(
    admin_user: User = Depends(get_current_admin_user),
    db: AsyncSession = Depends(get_db_session)
):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å, —â–æ –æ—á—ñ–∫—É—é—Ç—å —Å—Ö–≤–∞–ª–µ–Ω–Ω—è"""
    
    result = await db.execute(
        select(AutomationTask, User)
        .join(User, AutomationTask.user_id == User.id)
        .where(AutomationTask.status == "pending_approval")
        .order_by(AutomationTask.created_at.asc())
    )
    
    tasks_and_users = result.all()
    
    return [
        PendingTaskResponse(
            id=str(task.id),
            user_id=user.id,
            username=user.username,
            first_name=user.first_name,
            geo_location=task.geo_location,
            comments=task.comments,
            post_links=task.post_links,
            created_at=task.created_at.isoformat()
        )
        for task, user in tasks_and_users
    ]

@router.post("/approve-task")
async def approve_or_reject_task(
    approval_request: TaskApprovalRequest,
    admin_user: User = Depends(get_current_admin_user),
    db: AsyncSession = Depends(get_db_session)
):
    """–°—Ö–≤–∞–ª–µ–Ω–Ω—è –∞–±–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è"""
    
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ task_id —è–∫ —Ä—è–¥–æ–∫, –æ—Å–∫—ñ–ª—å–∫–∏ —Ç–µ–ø–µ—Ä UUID –∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è —è–∫ String(36)
    if not approval_request.task_id:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ID –∑–∞–≤–¥–∞–Ω–Ω—è"
        )
    
    # –ü–æ—à—É–∫ –∑–∞–≤–¥–∞–Ω–Ω—è
    result = await db.execute(
        select(AutomationTask).where(AutomationTask.id == approval_request.task_id)
    )
    task = result.scalar_one_or_none()
    
    if not task:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–ó–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
        )
    
    if task.status != "pending_approval":
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="–ó–∞–≤–¥–∞–Ω–Ω—è –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ"
        )
    
    if approval_request.action == "approve":
        # –°—Ö–≤–∞–ª–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è
        task.status = "approved"
        task.approved_at = datetime.utcnow()
        task.admin_notes = approval_request.admin_notes
        
        await db.commit()
        
        # –î–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ —á–µ—Ä–≥–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
        try:
            await queue_automation_task(str(task.id))
            message = f"–ó–∞–≤–¥–∞–Ω–Ω—è {task.id} —Å—Ö–≤–∞–ª–µ–Ω–æ —Ç–∞ –¥–æ–¥–∞–Ω–æ –¥–æ —á–µ—Ä–≥–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è"
        except Exception as e:
            message = f"–ó–∞–≤–¥–∞–Ω–Ω—è —Å—Ö–≤–∞–ª–µ–Ω–æ, –∞–ª–µ –ø–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ —á–µ—Ä–≥–∏: {e}"
        
        print(f"‚úÖ –ê–¥–º—ñ–Ω {admin_user.username} —Å—Ö–≤–∞–ª–∏–≤ –∑–∞–≤–¥–∞–Ω–Ω—è {task.id}")
        
    elif approval_request.action == "reject":
        # –í—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è
        task.status = "rejected"
        task.admin_notes = approval_request.admin_notes or "–í—ñ–¥—Ö–∏–ª–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
        
        await db.commit()
        
        message = f"–ó–∞–≤–¥–∞–Ω–Ω—è {task.id} –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ"
        print(f"‚ùå –ê–¥–º—ñ–Ω {admin_user.username} –≤—ñ–¥—Ö–∏–ª–∏–≤ –∑–∞–≤–¥–∞–Ω–Ω—è {task.id}")
        
    else:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="–ù–µ–≤—ñ—Ä–Ω–∞ –¥—ñ—è. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ 'approve' –∞–±–æ 'reject'"
        )
    
    return {"message": message, "task_id": str(task.id), "status": task.status}

@router.get("/users", response_model=List[UserListResponse])
async def get_all_users(
    admin_user: User = Depends(get_current_admin_user),
    db: AsyncSession = Depends(get_db_session)
):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
    
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –∫—ñ–ª—å–∫—ñ—Å—Ç—é –∑–∞–≤–¥–∞–Ω—å
    result = await db.execute(
        select(User, func.count(AutomationTask.id).label('tasks_count'))
        .outerjoin(AutomationTask, User.id == AutomationTask.user_id)
        .group_by(User.id)
        .order_by(User.created_at.desc())
    )
    
    users_with_counts = result.all()
    
    return [
        UserListResponse(
            id=user.id,
            telegram_id=user.telegram_id,
            username=user.username,
            first_name=user.first_name,
            is_approved=user.is_approved,
            is_admin=user.is_admin,
            created_at=user.created_at.isoformat(),
            last_activity=user.last_activity.isoformat() if user.last_activity else user.created_at.isoformat(),
            tasks_count=tasks_count
        )
        for user, tasks_count in users_with_counts
    ]

@router.post("/approve-user")
async def approve_user(
    approval_request: UserApprovalRequest,
    admin_user: User = Depends(get_current_admin_user),
    db: AsyncSession = Depends(get_db_session)
):
    """–°—Ö–≤–∞–ª–µ–Ω–Ω—è –∞–±–æ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    
    # –ü–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    result = await db.execute(
        select(User).where(User.id == approval_request.user_id)
    )
    user = result.scalar_one_or_none()
    
    if not user:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
        )
    
    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user.is_approved = approval_request.is_approved
    
    # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —Å—Ö–≤–∞–ª–µ–Ω–∏–π)
    if approval_request.is_approved and approval_request.is_admin:
        user.is_admin = True
    else:
        user.is_admin = False
    
    await db.commit()
    
    action = "—Å—Ö–≤–∞–ª–µ–Ω–æ" if approval_request.is_approved else "–∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ"
    admin_suffix = " —è–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä" if user.is_admin else ""
    
    print(f"üë§ –ê–¥–º—ñ–Ω {admin_user.username} {action} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user.username}{admin_suffix}")
    
    return {
        "message": f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user.username} {action}{admin_suffix}",
        "user_id": user.id,
        "is_approved": user.is_approved,
        "is_admin": user.is_admin
    }

@router.get("/stats")
async def get_admin_stats(
    admin_user: User = Depends(get_current_admin_user),
    db: AsyncSession = Depends(get_db_session)
):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ—ó –ø–∞–Ω–µ–ª—ñ"""
    
    # –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    total_users_result = await db.execute(select(func.count(User.id)))
    total_users = total_users_result.scalar()
    
    # –°—Ö–≤–∞–ª–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ
    approved_users_result = await db.execute(
        select(func.count(User.id)).where(User.is_approved == True)
    )
    approved_users = approved_users_result.scalar()
    
    # –ó–∞–≤–¥–∞–Ω–Ω—è –∑–∞ —Å—Ç–∞—Ç—É—Å–∞–º–∏
    tasks_stats_result = await db.execute(
        select(AutomationTask.status, func.count(AutomationTask.id))
        .group_by(AutomationTask.status)
    )
    tasks_stats = dict(tasks_stats_result.all())
    
    # –î–æ—Å—Ç—É–ø–Ω—ñ Facebook –∞–∫–∞—É–Ω—Ç–∏ –∑–∞ –≥–µ–æ
    accounts_stats_result = await db.execute(
        select(FacebookAccount.geo_location, func.count(FacebookAccount.id))
        .where(and_(FacebookAccount.is_active == True, FacebookAccount.is_blocked == False))
        .group_by(FacebookAccount.geo_location)
    )
    accounts_stats = dict(accounts_stats_result.all())
    
    return {
        "users": {
            "total": total_users,
            "approved": approved_users,
            "pending": total_users - approved_users
        },
        "tasks": tasks_stats,
        "facebook_accounts": accounts_stats,
        "updated_at": datetime.utcnow().isoformat()
    }